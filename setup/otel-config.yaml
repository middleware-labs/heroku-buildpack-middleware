exporters:
  logging:
    loglevel: debug
  otlp/2:
    endpoint: ${MW_TARGET}
    headers:
      authorization: ${MW_API_KEY}
    sending_queue:
      enabled: true
      num_consumers: 100
      queue_size: 10000
extensions:
  health_check: {}
processors:
  attributes/logs:
    actions:
    - action: upsert
      from_attribute: name
      key: source
    - action: upsert
      from_attribute: operator_type
      key: source
    - action: upsert
      from_attribute: log.file.name
      key: source
    - action: upsert
      from_attribute: fluent.tag
      key: source
    - action: upsert
      from_attribute: service.name
      key: source
    - action: upsert
      from_attribute: project.name
      key: source
    - action: upsert
      from_attribute: serviceName
      key: source
    - action: upsert
      from_attribute: projectName
      key: source
    - action: upsert
      from_attribute: pod_name
      key: source
    - action: upsert
      from_attribute: container_name
      key: source
    - action: upsert
      from_attribute: namespace
      key: source
  attributes/traces:
    actions:
    - action: insert
      from_attribute: db.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: messaging.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: rpc.system
      key: mw.service.name.derived
    - action: insert
      from_attribute: http.scheme
      key: mw.service.name.derived
    - action: insert
      from_attribute: faas.trigger
      key: mw.service.name.derived
  batch: null
  cumulativetodelta/ratecalculation:
    include:
      match_type: strict
      metrics:
      - system.network.io.rate
      - system.disk.io.rate
      - system.disk.operations.rate
      - system.network.packets.rate
      - system.network.errors.rate
      - system.network.dropped.rate
  deltatorate/ratecalculation:
    metrics:
    - system.network.io.rate
    - system.disk.io.rate
    - system.disk.operations.rate
    - system.network.packets.rate
    - system.network.errors.rate
    - system.network.dropped.rate
  resource/metrics:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: insert
      key: mw.host.tags
      value: ${MW_HOST_TAGS}
    - action: upsert
      from_attribute: service.name
      key: heroku.service.name
    - action: delete
      key: service.name
  resource/hostid:
    attributes:
    - action: upsert
      from_attribute: host.name
      key: host.id
  resource/logs:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: delete
      key: host.name
  resource/servicenamefromhostname:
    attributes:
    - action: insert
      from_attribute: host.name
      key: service.name
  resource/traces:
    attributes:
    - action: upsert
      key: mw.account_key
      value: ${MW_API_KEY}
    - action: delete
      key: host.name
  resourcedetection:
    detectors:
    - env
    - heroku
    - system
    override: false
    system:
      hostname_sources:
      - os
    timeout: 5s
  transform/copyservicefromlogattributes:
    error_mode: ignore
    log_statements:
    - context: log
      statements:
      - set(resource.attributes["service.name"], attributes["service.name"]) where
        attributes["service.name"] != nil and resource.attributes["service.name"]
        == nil
  transform/ratecalculation/copymetric:
    error_mode: ignore
    metric_statements:
    - context: metric
      statements:
      - copy_metric(name="system.network.io.rate") where name == "system.network.io"
      - copy_metric(name="system.disk.io.rate") where name == "system.disk.io"
      - copy_metric(name="system.disk.operations.rate") where name == "system.disk.operations"
      - copy_metric(name="system.network.packets.rate") where name == "system.network.packets"
      - copy_metric(name="system.network.errors.rate") where name == "system.network.errors"
      - copy_metric(name="system.network.dropped.rate") where name == "system.network.dropped"
  transform/ratecalculation/sumtogauge:
    error_mode: ignore
    metric_statements:
    - context: datapoint
      statements:
      - convert_sum_to_gauge() where metric.name == "system.network.io"
      - convert_sum_to_gauge() where metric.name == "system.disk.io"
      - convert_sum_to_gauge() where metric.name == "system.disk.operations"
      - convert_sum_to_gauge() where metric.name == "system.network.packets"
      - convert_sum_to_gauge() where metric.name == "system.network.errors"
      - convert_sum_to_gauge() where metric.name == "system.network.dropped"
receivers:
  fluentforward:
    endpoint: 0.0.0.0:8006
  hostmetrics:
    collection_interval: 5s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io.speed:
            enabled: true
      filesystem:
        include_virtual_filesystems: true
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
        cpu_average: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
        metrics:
          system.network.io.bandwidth:
            enabled: true
      paging: {}
      process:
        avoid_selected_errors: true
        mute_process_cgroup_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_name_error: true
        mute_process_user_error: true
      processes: {}
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:9319
      http:
        endpoint: 0.0.0.0:9320
  prometheus:
    config:
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 5s
        static_configs:
        - targets:
          - 127.0.0.1:${MW_AGENT_INTERNAL_METRICS_PORT}
service:
  extensions:
  - health_check
  pipelines:
    logs:
      exporters:
      - otlp/2
      processors:
      - resource/logs
      - resourcedetection
      - resource/servicenamefromhostname
      - resource/hostid
      - attributes/logs
      - transform/copyservicefromlogattributes
      - batch
      receivers:
      - otlp
      - fluentforward
    metrics:
      exporters:
      - otlp/2
      processors:
      - resourcedetection
      - resource/hostid
      - resource/metrics
      - transform/ratecalculation/copymetric
      - cumulativetodelta/ratecalculation
      - deltatorate/ratecalculation
      - transform/ratecalculation/sumtogauge
      - batch
      receivers:
      - hostmetrics
      - otlp
      - prometheus
    traces:
      exporters:
      - otlp/2
      processors:
      - resource/traces
      - resourcedetection
      - resource/hostid
      - attributes/traces
      - batch
      receivers:
      - otlp
  telemetry:
    logs:
      level: fatal
    metrics:
      address: 127.0.0.1:${MW_AGENT_INTERNAL_METRICS_PORT}
